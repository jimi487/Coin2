schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type CoinUser @model{
  age: String
  country: String
  f_name: String
  l_name: String
  language: String
  pictureID: ID!
  sex: String
  userID: Int!
}

type CoinUserConnection {
  items: [CoinUser]
  nextToken: String
}

type Mutation {
  createCoinUser(input: CreateCoinUserInput!): CoinUser
  deleteCoinUser(input: DeleteCoinUserInput!): CoinUser
  updateCoinUser(input: UpdateCoinUserInput!): CoinUser
}

type Query {
  getCoinUser(userID: Int!): CoinUser
  listCoinUsers(filter: TableCoinUserFilterInput, limit: Int, nextToken: String): CoinUserConnection
  queryCoinUsersByPictureIDIndex(after: String, first: Int, pictureID: ID!): CoinUserConnection
}

type Subscription {
  onCreateCoinUser(f_name: String, l_name: String, language: String, pictureID: ID, userID: Int): CoinUser @aws_subscribe(mutations : ["createCoinUser"])
  onDeleteCoinUser(f_name: String, l_name: String, language: String, pictureID: ID, userID: Int): CoinUser @aws_subscribe(mutations : ["deleteCoinUser"])
  onUpdateCoinUser(f_name: String, l_name: String, language: String, pictureID: ID, userID: Int): CoinUser @aws_subscribe(mutations : ["updateCoinUser"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateCoinUserInput {
  age: String
  country: String
  f_name: String
  l_name: String
  language: String
  pictureID: ID!
  sex: String
  userID: Int!
}

input DeleteCoinUserInput {
  userID: Int!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableCoinUserFilterInput {
  age: TableStringFilterInput
  country: TableStringFilterInput
  f_name: TableStringFilterInput
  l_name: TableStringFilterInput
  language: TableStringFilterInput
  pictureID: TableIDFilterInput
  sex: TableStringFilterInput
  userID: TableIntFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateCoinUserInput {
  age: String
  country: String
  f_name: String
  l_name: String
  language: String
  pictureID: ID
  sex: String
  userID: Int!
}
